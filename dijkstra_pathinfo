#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
#define pb push_back
#define vi vector<int>
#define vpi vector<pair<int,int>>
#define endl "\n"
#define pii pair<int,int>
#define mii map<int,int>
#define int long long int
#define fbo find_by_order
#define ook order_of_key
#define in insert
#define F first
#define S second
#define print(a) for(auto x: a)cout<<x<<" "; cout<<endl
# define INF 1e18

typedef pair<int, int> iPair; 

class Graph 
{ 
	int V;
	list< pair<int, int> > *adj; //vertex and distance from source

public: 
	Graph(int V) 
	{ 
		this->V = V; 
		adj = new list<iPair> [V]; 
	}

	void addEdge(int u, int v, int w) 
	{ 
		adj[u].push_back(make_pair(v, w)); 
		adj[v].push_back(make_pair(u, w)); 
	}
	void printPath(int parent[], int j) 
	{
	    if (parent[j] == - 1) 
	        return; 
	  
	    printPath(parent, parent[j]); 
	  
	    printf("%lld ", j); 
	} 
	void shortestPath(int src) 
	{ 
		priority_queue< iPair, vector <iPair> , greater<iPair> > pq; 
		vector<int> dist(V, INF); 

		pq.push(make_pair(0, src)); 
		dist[src] = 0; 
		int parent[V]={-1};

		while (!pq.empty()) 
		{
			int u = pq.top().second; 
			pq.pop(); 

			list< pair<int, int> >::iterator i; 
			for (i = adj[u].begin(); i != adj[u].end(); ++i) 
			{ 
				int v = (*i).first; 
				int weight = (*i).second; 

				// If there is shorted path to v through u. 
				if (dist[v] > dist[u] + weight) 
				{ 
					parent[v]=u;
					dist[v] = dist[u] + weight; 
					pq.push(make_pair(dist[v], v)); 
				} 
			} 
		} 

		// Print shortest distances stored in dist[] 
		printf("Vertex Distance from Source\n"); 
		for (int i = 1; i < V; ++i)
			printf("%lld \t\t %lld\n", i, dist[i]);

	    printf("Vertex\t Distance\tPath"); 
	    for (int i = 2; i < V; i++) 
	    {
	        printf("\n%lld -> %lld \t\t %lld\t\t ", src, i, dist[i]); 
	        printPath(parent, i); 
	    }
	} 

}; 

int32_t main() 
{ 
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    #ifndef ONLINE_JUDGE
        freopen("input.txt",  "r",  stdin);
        freopen("output.txt", "w", stdout);
    #endif
    cout << setprecision(9) << fixed;
    int n,k;
    cin>>n>>k;
	Graph g(n+1); //if nodes are starting from 1
	for (int i = 0; i < k; ++i)
	{
		int a,b,weight;
		cin>>a>>b>>weight;
		g.addEdge(a,b,weight); 

	}
						//SAMPLE INPUT
							/*5 6
							1 2 2
							2 5 5
							2 3 4
							1 4 1
							4 3 3
							3 5 1*/


	g.shortestPath(1); 

	return 0; 
} 
